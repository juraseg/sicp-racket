#lang racket
(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))

(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cdr mobile))
(define (length-branch branch)
  (car branch))
(define (structure-branch branch)
  (cdr branch))

(define (total-weight mobile)
  (if (pair? mobile)
      (+ (total-weight (structure-branch (left-branch mobile)))
         (total-weight (structure-branch (right-branch mobile))))
      mobile))
(define (balanced? mobile)
  (if (not (pair? mobile))
      #t
      (let ((left (left-branch mobile))
            (right (right-branch mobile)))
        (and (balanced? (structure-branch left))
             (balanced? (structure-branch right))
             (= (* (length-branch left) (total-weight (structure-branch left)))
                (* (length-branch right) (total-weight (structure-branch right))))))))