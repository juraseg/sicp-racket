#lang racket

(define (smallest-divisor n)
  (define (next prev)
    (if (< prev 3)
        (+ prev 1)
        (+ prev 2)))
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n)
           n)
          ((divides? test-divisor n)
           test-divisor)
          (else (find-divisor
                 n
                 (next test-divisor)))))
  (define (divides? a b)
    (= (remainder b a) 0))
  (define (square n) (* n n))
  (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (expmod base exp m)
  (define (square n) (* n n))
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder
          (square (expmod base(/ exp 2) m))
          m))
        (else
         (remainder
          (* base (expmod base (- exp 1) m))
          m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
  (cond ((= times 0) #t)
        ((fermat-test n)
         (fast-prime? n (- times 1)))
        (else #f)))

(define (timed-prime-test n)
  (start-prime-test n (current-inexact-milliseconds)))
(define (start-prime-test n start-time)
  (when (prime? n)
      (report-prime n (- (current-inexact-milliseconds)
                         start-time))))
(define (report-prime n elapsed-time)
  (display n)
  (display " *** ")
  (display (/ elapsed-time 1000))
  (newline))
(define (search-for-prime from to)
  (cond ((even? from) (search-for-prime (+ from 1) to))
        ((< from to)
         (timed-prime-test from)
         (search-for-prime (+ from 2) to))))

(provide (all-defined-out))