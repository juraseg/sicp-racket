#lang racket
(define (square x) (* x x))

(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (make-segment a b)
  (cons a b))
(define (start-segment s)
  (car s))
(define (end-segment s)
  (cdr s))

(define (midpoint-segment s)
  (make-point (/ (+ (x-point (end-segment s))
                    (x-point (start-segment s)))
                 2.0)
              (/ (+ (y-point (end-segment s))
                    (y-point (start-segment s)))
                 2.0)))
(define (length-segment s)
  (sqrt (+ (square (- (x-point (start-segment s))
                      (x-point (end-segment s))))
           (square (- (y-point (start-segment s))
                      (y-point (end-segment s)))))))

(define (make-rect-old a c)
  (let ((b (make-point (x-point a) (y-point c)))
        (d (make-point (x-point c) (y-point a))))
    (cons (make-segment a b)
          (make-segment a d))))
(define (make-rect a c)
  (cons a c))
(define (rect-side1 r)
  (let ((b (make-point (x-point (car r)) (y-point (cdr r)))))
    (make-segment (car r) b)))
(define (rect-side2 r)
  (let ((d (make-point (x-point (cdr r)) (y-point (car r)))))
    (make-segment (car r) d)))
(define (rect-width r)
  (length-segment (rect-side1 r)))
(define (rect-height r)
  (length-segment (rect-side2 r)))

(define (rect-perim r)
  (+ (* 2 (rect-width r))
     (* 2 (rect-height r))))
(define (rect-area r)
  (* (rect-width r)
     (rect-height r)))